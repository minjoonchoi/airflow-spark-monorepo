services:
  # Airflow API Server - Airflow 웹 UI 제공
  airflow-api-server:
    build: .
    restart: unless-stopped
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - /var/run/docker.sock:/var/run/docker.sock  # Docker Operator 사용을 위한 설정
    environment:
      - AIRFLOW_HOME=/opt/airflow
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__CORE__AUTH_MANAGER=airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
      - AIRFLOW__API__AUTH_BACKENDS=airflow.auth.backends.basic_auth,airflow.auth.backends.session
      - AIRFLOW__AUTH__AUTH_TYPE=AUTH_DB
    ports:
      - "8080:8080"
    command: api-server
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/v2/version"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
      
  # Airflow Scheduler - DAG 스케줄링 담당
  airflow-scheduler:
    build: .
    restart: unless-stopped
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - /var/run/docker.sock:/var/run/docker.sock  # Docker Operator 사용을 위한 설정
    environment:
      - AIRFLOW_HOME=/opt/airflow
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__CORE__AUTH_MANAGER=airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
      - AIRFLOW__API__AUTH_BACKENDS=airflow.auth.backends.basic_auth,airflow.auth.backends.session
      - AIRFLOW__AUTH__AUTH_TYPE=AUTH_DB
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    
  # Airflow Init - 데이터베이스 초기화
  airflow-init:
    build: .
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - AIRFLOW_HOME=/opt/airflow
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__CORE__AUTH_MANAGER=airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
      - AIRFLOW__API__AUTH_BACKENDS=airflow.auth.backends.basic_auth,airflow.auth.backends.session
      - AIRFLOW__AUTH__AUTH_TYPE=AUTH_DB
      # 초기 사용자 생성 환경변수 (airflow.cfg로 대체 불가)
      - _AIRFLOW_DB_MIGRATE=true
      - _AIRFLOW_WWW_USER_CREATE=true
      - _AIRFLOW_WWW_USER_USERNAME=airflow
      - _AIRFLOW_WWW_USER_PASSWORD=airflow
      - _AIRFLOW_WWW_USER_EMAIL=admin@example.com
      - _AIRFLOW_WWW_USER_FIRSTNAME=Admin
      - _AIRFLOW_WWW_USER_LASTNAME=User
      - _AIRFLOW_WWW_USER_ROLE=Admin
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
    command: >
      bash -c "
        set -e;
        airflow db migrate;
        echo 'Database migration completed successfully';
        echo 'Initialization complete'
      "
    restart: on-failure

  # Postgres - Airflow 메타데이터 저장소
  postgres:
    image: postgres:13
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s

volumes:
  postgres-db-volume: 